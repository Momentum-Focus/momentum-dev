version: '3.8'

services:
  # Banco de dados PostgreSQL
  postgres:
    image: postgres:15-alpine
    container_name: momentum-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: momentum_dev
      POSTGRES_USER: momentum_user
      POSTGRES_PASSWORD: momentum_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db:/docker-entrypoint-initdb.d
    networks:
      - momentum-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U momentum_user -d momentum_dev"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Aplicação NestJS
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: momentum-app
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: 3000
      DATABASE_URL: postgresql://momentum_user:momentum_password@postgres:5432/momentum_dev?schema=public
      DIRECT_URL: postgresql://momentum_user:momentum_password@postgres:5432/momentum_dev?schema=public
      JWT_SECRET: your-super-secret-jwt-key-change-in-production
    ports:
      - "3000:3000"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - momentum-network
    volumes:
      - ./uploads:/app/uploads
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis para cache (opcional)
  redis:
    image: redis:7-alpine
    container_name: momentum-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - momentum-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  momentum-network:
    driver: bridge
